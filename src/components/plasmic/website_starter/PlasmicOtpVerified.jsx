// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9eShMHQiqbhQ86dWVmhWN6
// Component: nKIZPYFzjh5s
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 9eShMHQiqbhQ86dWVmhWN6/projectcss
import sty from "./PlasmicOtpVerified.module.css"; // plasmic-import: nKIZPYFzjh5s/css
import Ellipse48Icon from "./icons/PlasmicIcon__Ellipse48"; // plasmic-import: 7-aR21xczYjN/icon
import Ellipse47Icon from "./icons/PlasmicIcon__Ellipse47"; // plasmic-import: ovqxlsAdwXI5/icon
import Mditick2Icon from "./icons/PlasmicIcon__Mditick2"; // plasmic-import: uCdN6E9I84w6/icon
import imageEp2An7L3A8C from "./images/image.png"; // plasmic-import: Ep2An7-L3a8C/picture
import image2FbzPv3GHmqLc from "./images/image2.png"; // plasmic-import: FBZPv3GHmqLc/picture

createPlasmicElementProxy;

export const PlasmicOtpVerified__VariantProps = new Array();

export const PlasmicOtpVerified__ArgProps = new Array();

const $$ = {};

function PlasmicOtpVerified__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"otpVerified"}
            data-plasmic-override={overrides.otpVerified}
            className={classNames(projectcss.all, sty.otpVerified)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__onbHr)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: imageEp2An7L3A8C,
                fullWidth: 1440,
                fullHeight: 1214,
                aspectRatio: undefined
              }}
            />

            <div
              data-plasmic-name={"joinAThrivingCommunityOfEngineers"}
              data-plasmic-override={
                overrides.joinAThrivingCommunityOfEngineers
              }
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.joinAThrivingCommunityOfEngineers
              )}
            >
              {"Join a thriving community of Engineers  "}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oQiIo
              )}
            >
              {"with UnBoxing Community"}
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame3664"}
              data-plasmic-override={overrides.frame3664}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame3664)}
            >
              <div
                data-plasmic-name={"frame75"}
                data-plasmic-override={overrides.frame75}
                className={classNames(projectcss.all, sty.frame75)}
              >
                <Ellipse48Icon
                  className={classNames(projectcss.all, sty.svg__grInM)}
                  role={"img"}
                />

                <Ellipse47Icon
                  className={classNames(projectcss.all, sty.svg__rELjR)}
                  role={"img"}
                />

                <Mditick2Icon
                  className={classNames(projectcss.all, sty.svg__kllhp)}
                  role={"img"}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__smGvw
                )}
              >
                {"Phone Number Verified"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xt15T
                )}
              >
                {"You will be redirected to the Main page\nin a few moments"}
              </div>
            </Stack__>
            <div
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames(projectcss.all, sty.logo)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"logoUbc"}
                data-plasmic-override={overrides.logoUbc}
                hasGap={true}
                className={classNames(projectcss.all, sty.logoUbc)}
              >
                <div
                  data-plasmic-name={"frame3663"}
                  data-plasmic-override={overrides.frame3663}
                  className={classNames(projectcss.all, sty.frame3663)}
                >
                  <div
                    data-plasmic-name={"c"}
                    data-plasmic-override={overrides.c}
                    className={classNames(projectcss.all, sty.c)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mOf2Z
                      )}
                    >
                      {"C"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"u"}
                    data-plasmic-override={overrides.u}
                    className={classNames(projectcss.all, sty.u)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tGs2Z
                      )}
                    >
                      {"U"}
                    </div>
                  </div>
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mjlaU
                )}
              >
                {"UnBoxing Community"}
              </div>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"logo2"}
              data-plasmic-override={overrides.logo2}
              hasGap={true}
              className={classNames(projectcss.all, sty.logo2)}
            >
              <div
                data-plasmic-name={"logoUbc2"}
                data-plasmic-override={overrides.logoUbc2}
                className={classNames(projectcss.all, sty.logoUbc2)}
              >
                <div
                  data-plasmic-name={"c2"}
                  data-plasmic-override={overrides.c2}
                  className={classNames(projectcss.all, sty.c2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ax9J7
                    )}
                  >
                    {"C"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"u2"}
                  data-plasmic-override={overrides.u2}
                  className={classNames(projectcss.all, sty.u2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j3Ayg
                    )}
                  >
                    {"U"}
                  </div>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ifU2H
                )}
              >
                {"Back to\nUnBoxing"}
              </div>
            </Stack__>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__syawu)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: image2FbzPv3GHmqLc,
                fullWidth: 922,
                fullHeight: 26,
                aspectRatio: undefined
              }}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "otpVerified",
    "joinAThrivingCommunityOfEngineers",
    "frame3664",
    "frame75",
    "logo",
    "logoUbc",
    "frame3663",
    "c",
    "u",
    "logo2",
    "logoUbc2",
    "c2",
    "u2"
  ],

  otpVerified: [
    "otpVerified",
    "joinAThrivingCommunityOfEngineers",
    "frame3664",
    "frame75",
    "logo",
    "logoUbc",
    "frame3663",
    "c",
    "u",
    "logo2",
    "logoUbc2",
    "c2",
    "u2"
  ],

  joinAThrivingCommunityOfEngineers: ["joinAThrivingCommunityOfEngineers"],
  frame3664: ["frame3664", "frame75"],
  frame75: ["frame75"],
  logo: ["logo", "logoUbc", "frame3663", "c", "u"],
  logoUbc: ["logoUbc", "frame3663", "c", "u"],
  frame3663: ["frame3663", "c", "u"],
  c: ["c"],
  u: ["u"],
  logo2: ["logo2", "logoUbc2", "c2", "u2"],
  logoUbc2: ["logoUbc2", "c2", "u2"],
  c2: ["c2"],
  u2: ["u2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOtpVerified__ArgProps,
          internalVariantPropNames: PlasmicOtpVerified__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOtpVerified__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOtpVerified";
  } else {
    func.displayName = `PlasmicOtpVerified.${nodeName}`;
  }
  return func;
}

export const PlasmicOtpVerified = Object.assign(
  // Top-level PlasmicOtpVerified renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    otpVerified: makeNodeComponent("otpVerified"),
    joinAThrivingCommunityOfEngineers: makeNodeComponent(
      "joinAThrivingCommunityOfEngineers"
    ),
    frame3664: makeNodeComponent("frame3664"),
    frame75: makeNodeComponent("frame75"),
    logo: makeNodeComponent("logo"),
    logoUbc: makeNodeComponent("logoUbc"),
    frame3663: makeNodeComponent("frame3663"),
    c: makeNodeComponent("c"),
    u: makeNodeComponent("u"),
    logo2: makeNodeComponent("logo2"),
    logoUbc2: makeNodeComponent("logoUbc2"),
    c2: makeNodeComponent("c2"),
    u2: makeNodeComponent("u2"),
    // Metadata about props expected for PlasmicOtpVerified
    internalVariantProps: PlasmicOtpVerified__VariantProps,
    internalArgProps: PlasmicOtpVerified__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOtpVerified;
/* prettier-ignore-end */
